 name of the test preceded by titles of each its ancestral suites).
	   * As such, using an <em>exact-match</em> fixed pattern against the
	   * test name itself will not yield any matches.
	   * <br>
	   * <strong>Previous filter value will be overwritten on each call!</strong>
	   *
	   * @public
	   * @see [CLI option](../#-grep-regexp-g-regexp)
	   * @see {@link Mocha#fgrep}
	   * @see {@link Mocha#invert}
	   * @param {RegExp|String} re - Regular expression used to select tests.
	   * @return {Mocha} this
	   * @chainable
	   * @example
	   *
	   * // Select tests whose full title contains `"match"`, ignoring case
	   * mocha.grep(/match/i);
	   * @example
	   *
	   * // Same as above but with regexp-like string argument
	   * mocha.grep('/match/i');
	   * @example
	   *
	   * // ## Anti-example
	   * // Given embedded test `it('only-this-test')`...
	   * mocha.grep('/^only-this-test$/');    // NO! Use `.only()` to do this!
	   */


	  Mocha.prototype.grep = function (re) {
	    if (utils.isString(re)) {
	      // extract args if it's regex-like, i.e: [string, pattern, flag]
	      var arg = re.match(/^\/(.*)\/(g|i|)$|.*/);
	      this.options.grep = new RegExp(arg[1] || arg[0], arg[2]);
	    } else {
	      this.options.grep = re;
	    }

	    return this;
	  };
	  /**
	   * Inverts `grep` matches.
	   *
	   * @public
	   * @see {@link Mocha#grep}
	   * @return {Mocha} this
	   * @chainable
	   * @example
	   *
	   * // Select tests whose full title does *not* contain `"match"`, ignoring case
	   * mocha.grep(/match/i).invert();
	   */


	  Mocha.prototype.invert = function () {
	    this.options.invert = true;
	    return this;
	  };
	  /**
	   * Enables or disables checking for global variables leaked while running tests.
	   *
	   * @public
	   * @see [CLI option](../#-check-leaks)
	   * @param {boolean} [checkLeaks=true] - Whether to check for global variable leaks.
	   * @return {Mocha} this
	   * @chainable
	   */


	  Mocha.prototype.checkLeaks = function (checkLeaks) {
	    this.options.checkLeaks = checkLeaks !== false;
	    return this;
	  };
	  /**
	   * Enables or disables whether or not to dispose after each test run.
	   * Disable this to ensure you can run the test suite multiple times.
	   * If disabled, be sure to dispose mocha when you're done to prevent memory leaks.
	   * @public
	   * @see {@link Mocha#dispose}
	   * @param {boolean} cleanReferencesAfterRun
	   * @return {Mocha} this
	   * @chainable
	   */


	  Mocha.prototype.cleanReferencesAfterRun = function (cleanReferencesAfterRun) {
	    this._cleanReferencesAfterRun = cleanReferencesAfterRun !== false;
	    return this;
	  };
	  /**
	   * Manually dispose this mocha instance. Mark this instance as `disposed` and unable to run more tests.
	   * It also removes function references to tests functions and hooks, so variables trapped in closures can be cleaned by the garbage collector.
	   * @public
	   */


	  Mocha.prototype.dispose = function () {
	    if (this._state === mochaStates.RUNNING) {
	      throw createMochaInstanceAlreadyRunningError('Cannot dispose while the mocha instance is still running tests.');
	    }

	    this.unloadFiles();
	    this._previousRunner && this._previousRunner.dispose();
	    this.suite.dispose();
	    this._state = mochaStates.DISPOSED;
	  };
	  /**
	   * Displays full stack trace upon test failure.
	   *
	   * @public
	   * @see [CLI option](../#-full-trace)
	   * @param {boolean} [fullTrace=true] - Whether to print full stacktrace upon failure.
	   * @return {Mocha} this
	   * @chainable
	   */


	  Mocha.prototype.fullTrace = function (fullTrace) {
	    this.options.fullTrace = fullTrace !== false;
	    return this;
	  };
	  /**
	   * Enables desktop notification support if prerequisite software installed.
	   *
	   * @public
	   * @see [CLI option](../#-growl-g)
	   * @return {Mocha} this
	   * @chainable
	   */


	  Mocha.prototype.growl = function () {
	    this.options.growl = this.isGrowlCapable();

	    if (!this.options.growl) {
	      var detail = utils.isBrowser() ? 'notification support not available in this browser...' : 'notification support prerequisites not installed...';
	      console.error(detail + ' cannot enable!');
	    }

	    return this;
	  };
	  /**
	   * @summary
	   * Determines if Growl support seems likely.
	   *
	   * @description
	   * <strong>Not available when run in browser.</strong>
	   *
	   * @private
	   * @see {@link Growl#isCapable}
	   * @see {@link Mocha#growl}
	   * @return {boolean} whether Growl support can be expected
	   */


	  Mocha.prototype.isGrowlCapable = growl.isCapable;
	  /**
	   * Implements desktop notifications using a pseudo-reporter.
	   *
	   * @private
	   * @see {@link Mocha#growl}
	   * @see {@link Growl#notify}
	   * @param {Runner} runner - Runner instance.
	   */

	  Mocha.prototype._growl = growl.notify;
	  /**
	   * Specifies whitelist of variable names to be expected in global scope.
	   *
	   * @public
	   * @see [CLI option](../#-global-variable-name)
	   * @see {@link Mocha#checkLeaks}
	   * @param {String[]|String} global - Accepted global variable name(s).
	   * @return {Mocha} this
	   * @chainable
	   * @example
	   *
	   * // Specify variables to be expected in global scope
	   * mocha.global(['jQuery', 'MyLib']);
	   */

	  Mocha.proto