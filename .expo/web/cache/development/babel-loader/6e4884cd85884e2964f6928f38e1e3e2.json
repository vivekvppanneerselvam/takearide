{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createIconSet;\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"./react-native\");\n\nvar _iconButton = _interopRequireDefault(require(\"./icon-button\"));\n\nvar _tabBarItemIos = _interopRequireDefault(require(\"./tab-bar-item-ios\"));\n\nvar _toolbarAndroid = _interopRequireDefault(require(\"./toolbar-android\"));\n\nvar _jsxFileName = \"D:\\\\WS\\\\reactws\\\\takearide\\\\node_modules\\\\react-native-star-rating\\\\node_modules\\\\react-native-vector-icons\\\\lib\\\\create-icon-set.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar NativeIconAPI = _reactNative.NativeModules.RNVectorIconsManager || _reactNative.NativeModules.RNVectorIconsModule;\nvar DEFAULT_ICON_SIZE = 12;\nvar DEFAULT_ICON_COLOR = 'black';\n\nfunction createIconSet(glyphMap, fontFamily, fontFile) {\n  var fontReference = fontFamily;\n\n  if (_reactNative.Platform.OS === 'android' && fontFile) {\n    fontReference = fontFile.replace(/\\.(otf|ttf)$/, '');\n  }\n\n  if (_reactNative.Platform.OS === 'windows' && fontFile) {\n    fontReference = \"Assets/\" + fontFile + \"#\" + fontFamily;\n  }\n\n  var IconNamePropType = _propTypes.default.oneOf(Object.keys(glyphMap));\n\n  var Icon = function (_PureComponent) {\n    (0, _inherits2.default)(Icon, _PureComponent);\n\n    var _super = _createSuper(Icon);\n\n    function Icon() {\n      var _this;\n\n      (0, _classCallCheck2.default)(this, Icon);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _super.call.apply(_super, [this].concat(args));\n      _this.root = null;\n\n      _this.handleRef = function (ref) {\n        _this.root = ref;\n      };\n\n      return _this;\n    }\n\n    (0, _createClass2.default)(Icon, [{\n      key: \"setNativeProps\",\n      value: function setNativeProps(nativeProps) {\n        if (this.root) {\n          this.root.setNativeProps(nativeProps);\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props = this.props,\n            name = _this$props.name,\n            size = _this$props.size,\n            color = _this$props.color,\n            style = _this$props.style,\n            props = (0, _objectWithoutProperties2.default)(_this$props, [\"name\", \"size\", \"color\", \"style\"]);\n        var glyph = name ? glyphMap[name] || '?' : '';\n\n        if (typeof glyph === 'number') {\n          glyph = String.fromCharCode(glyph);\n        }\n\n        var styleDefaults = {\n          fontSize: size,\n          color: color\n        };\n        var styleOverrides = {\n          fontFamily: fontReference,\n          fontWeight: 'normal',\n          fontStyle: 'normal'\n        };\n        props.style = [styleDefaults, style, styleOverrides];\n        props.ref = this.handleRef;\n        return _react.default.createElement(_reactNative.Text, (0, _extends2.default)({}, props, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 9\n          }\n        }), glyph, this.props.children);\n      }\n    }]);\n    return Icon;\n  }(_react.PureComponent);\n\n  Icon.propTypes = {\n    name: IconNamePropType,\n    size: _propTypes.default.number,\n    color: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n    children: _propTypes.default.node,\n    style: _propTypes.default.any\n  };\n  Icon.defaultProps = {\n    size: DEFAULT_ICON_SIZE,\n    allowFontScaling: false\n  };\n  var imageSourceCache = {};\n\n  function ensureNativeModuleAvailable() {\n    if (!NativeIconAPI) {\n      if (_reactNative.Platform.OS === 'android') {\n        throw new Error('RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.');\n      }\n\n      throw new Error('RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.');\n    }\n  }\n\n  function getImageSource(name) {\n    var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ICON_SIZE;\n    var color = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_ICON_COLOR;\n    ensureNativeModuleAvailable();\n    var glyph = glyphMap[name] || '?';\n\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    var processedColor = (0, _reactNative.processColor)(color);\n    var cacheKey = glyph + \":\" + size + \":\" + processedColor;\n\n    var scale = _reactNative.PixelRatio.get();\n\n    return new Promise(function (resolve, reject) {\n      var cached = imageSourceCache[cacheKey];\n\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({\n            uri: cached,\n            scale: scale\n          });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(fontReference, glyph, size, processedColor, function (err, image) {\n          var error = typeof err === 'string' ? new Error(err) : err;\n          imageSourceCache[cacheKey] = image || error || false;\n\n          if (!error && image) {\n            resolve({\n              uri: image,\n              scale: scale\n            });\n          } else {\n            reject(error);\n          }\n        });\n      }\n    });\n  }\n\n  function loadFont() {\n    var file = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : fontFile;\n\n    if (_reactNative.Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n\n      if (!file) {\n        return Promise.reject(new Error('Unable to load font, because no file was specified. '));\n      }\n\n      return NativeIconAPI.loadFontWithFileName.apply(NativeIconAPI, (0, _toConsumableArray2.default)(file.split('.')));\n    }\n\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  Icon.Button = (0, _iconButton.default)(Icon);\n  Icon.TabBarItem = (0, _tabBarItemIos.default)(IconNamePropType, getImageSource);\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = (0, _toolbarAndroid.default)(IconNamePropType, getImageSource);\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n  return Icon;\n}","map":{"version":3,"sources":["D:/WS/reactws/takearide/node_modules/react-native-star-rating/node_modules/react-native-vector-icons/lib/create-icon-set.js"],"names":["NativeIconAPI","NativeModules","RNVectorIconsManager","RNVectorIconsModule","DEFAULT_ICON_SIZE","DEFAULT_ICON_COLOR","createIconSet","glyphMap","fontFamily","fontFile","fontReference","Platform","OS","replace","IconNamePropType","PropTypes","oneOf","Object","keys","Icon","root","handleRef","ref","nativeProps","setNativeProps","props","name","size","color","style","glyph","String","fromCharCode","styleDefaults","fontSize","styleOverrides","fontWeight","fontStyle","children","PureComponent","propTypes","number","oneOfType","string","node","any","defaultProps","allowFontScaling","imageSourceCache","ensureNativeModuleAvailable","Error","getImageSource","processedColor","cacheKey","scale","PixelRatio","get","Promise","resolve","reject","cached","uri","getImageForFont","err","image","error","loadFont","file","loadFontWithFileName","split","hasIcon","prototype","hasOwnProperty","call","Button","TabBarItem","TabBarItemIOS","ToolbarAndroid"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  NativeModules,\n  Platform,\n  PixelRatio,\n  processColor,\n  Text,\n} from './react-native';\n\nimport createIconButtonComponent from './icon-button';\nimport createTabBarItemIOSComponent from './tab-bar-item-ios';\nimport createToolbarAndroidComponent from './toolbar-android';\n\nconst NativeIconAPI =\n  NativeModules.RNVectorIconsManager || NativeModules.RNVectorIconsModule;\n\nconst DEFAULT_ICON_SIZE = 12;\nconst DEFAULT_ICON_COLOR = 'black';\n\nexport default function createIconSet(glyphMap, fontFamily, fontFile) {\n  let fontReference = fontFamily;\n  // Android doesn't care about actual fontFamily name, it will only look in fonts folder.\n  if (Platform.OS === 'android' && fontFile) {\n    fontReference = fontFile.replace(/\\.(otf|ttf)$/, '');\n  }\n\n  if (Platform.OS === 'windows' && fontFile) {\n    fontReference = `Assets/${fontFile}#${fontFamily}`;\n  }\n\n  const IconNamePropType = PropTypes.oneOf(Object.keys(glyphMap));\n\n  class Icon extends PureComponent {\n    static propTypes = {\n      name: IconNamePropType,\n      size: PropTypes.number,\n      color: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n      children: PropTypes.node,\n      style: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    };\n\n    static defaultProps = {\n      size: DEFAULT_ICON_SIZE,\n      allowFontScaling: false,\n    };\n\n    setNativeProps(nativeProps) {\n      if (this.root) {\n        this.root.setNativeProps(nativeProps);\n      }\n    }\n\n    root = null;\n    handleRef = ref => {\n      this.root = ref;\n    };\n\n    render() {\n      const { name, size, color, style, ...props } = this.props;\n\n      let glyph = name ? glyphMap[name] || '?' : '';\n      if (typeof glyph === 'number') {\n        glyph = String.fromCharCode(glyph);\n      }\n\n      const styleDefaults = {\n        fontSize: size,\n        color,\n      };\n\n      const styleOverrides = {\n        fontFamily: fontReference,\n        fontWeight: 'normal',\n        fontStyle: 'normal',\n      };\n\n      props.style = [styleDefaults, style, styleOverrides];\n      props.ref = this.handleRef;\n\n      return (\n        <Text {...props}>\n          {glyph}\n          {this.props.children}\n        </Text>\n      );\n    }\n  }\n\n  const imageSourceCache = {};\n\n  function ensureNativeModuleAvailable() {\n    if (!NativeIconAPI) {\n      if (Platform.OS === 'android') {\n        throw new Error(\n          'RNVectorIconsModule not available, did you properly integrate the module? Try running `react-native link react-native-vector-icons` and recompiling.'\n        );\n      }\n      throw new Error(\n        'RNVectorIconsManager not available, did you add the library to your project and link with libRNVectorIcons.a? Try running `react-native link react-native-vector-icons` and recompiling.'\n      );\n    }\n  }\n\n  function getImageSource(\n    name,\n    size = DEFAULT_ICON_SIZE,\n    color = DEFAULT_ICON_COLOR\n  ) {\n    ensureNativeModuleAvailable();\n\n    let glyph = glyphMap[name] || '?';\n    if (typeof glyph === 'number') {\n      glyph = String.fromCharCode(glyph);\n    }\n\n    const processedColor = processColor(color);\n    const cacheKey = `${glyph}:${size}:${processedColor}`;\n    const scale = PixelRatio.get();\n\n    return new Promise((resolve, reject) => {\n      const cached = imageSourceCache[cacheKey];\n      if (typeof cached !== 'undefined') {\n        if (!cached || cached instanceof Error) {\n          reject(cached);\n        } else {\n          resolve({ uri: cached, scale });\n        }\n      } else {\n        NativeIconAPI.getImageForFont(\n          fontReference,\n          glyph,\n          size,\n          processedColor,\n          (err, image) => {\n            const error = typeof err === 'string' ? new Error(err) : err;\n            imageSourceCache[cacheKey] = image || error || false;\n            if (!error && image) {\n              resolve({ uri: image, scale });\n            } else {\n              reject(error);\n            }\n          }\n        );\n      }\n    });\n  }\n\n  function loadFont(file = fontFile) {\n    if (Platform.OS === 'ios') {\n      ensureNativeModuleAvailable();\n      if (!file) {\n        return Promise.reject(\n          new Error('Unable to load font, because no file was specified. ')\n        );\n      }\n      return NativeIconAPI.loadFontWithFileName(...file.split('.'));\n    }\n    return Promise.resolve();\n  }\n\n  function hasIcon(name) {\n    return Object.prototype.hasOwnProperty.call(glyphMap, name);\n  }\n\n  Icon.Button = createIconButtonComponent(Icon);\n  Icon.TabBarItem = createTabBarItemIOSComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.TabBarItemIOS = Icon.TabBarItem;\n  Icon.ToolbarAndroid = createToolbarAndroidComponent(\n    IconNamePropType,\n    getImageSource\n  );\n  Icon.getImageSource = getImageSource;\n  Icon.loadFont = loadFont;\n  Icon.hasIcon = hasIcon;\n\n  return Icon;\n}\n"]},"metadata":{},"sourceType":"script"}