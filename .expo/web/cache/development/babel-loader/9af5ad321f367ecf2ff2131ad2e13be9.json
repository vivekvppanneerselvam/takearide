{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createVariations = createVariations;\nexports.createSharedStyle = createSharedStyle;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction capitalizeFirstLetter(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\nfunction createVariations(baseName, nameSuffixes, key, value) {\n  return _lodash.default.reduce(nameSuffixes, function (result, variant) {\n    var variantName = variant ? baseName + \"-\" + variant : baseName;\n    var keyName = variant ? \"\" + key + capitalizeFirstLetter(variant) : key;\n    result[variantName] = (0, _defineProperty2.default)({}, keyName, value);\n    return result;\n  }, {});\n}\n\nfunction createSharedStyle(componentNames) {\n  var sharedStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var customStyles = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  return _lodash.default.reduce(componentNames, function (result, componentName) {\n    result[componentName] = _objectSpread({}, sharedStyle, {}, customStyles[componentName]);\n    return result;\n  }, {});\n}","map":{"version":3,"sources":["D:/WS/reactws/takearide/node_modules/native-base-shoutem-theme/src/addons.js"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","createVariations","baseName","nameSuffixes","key","_","reduce","result","variant","variantName","keyName","createSharedStyle","componentNames","sharedStyle","customStyles","componentName"],"mappings":";;;;;;;;;;AAAA;;;;;;AAEA,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AACpC,SAAOA,KAAK,CAACC,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCF,KAAK,CAACG,KAAN,CAAY,CAAZ,CAAvC;AACD;;AAiCM,SAASC,gBAAT,CAA0BC,QAA1B,EAAoCC,YAApC,EAAkDC,GAAlD,EAAuDP,KAAvD,EAA8D;AACnE,SAAOQ,gBAAEC,MAAF,CAASH,YAAT,EAAuB,UAACI,MAAD,EAASC,OAAT,EAAqB;AACjD,QAAMC,WAAW,GAAGD,OAAO,GAAMN,QAAN,SAAkBM,OAAlB,GAA8BN,QAAzD;AACA,QAAMQ,OAAO,GAAGF,OAAO,QAAMJ,GAAN,GAAYR,qBAAqB,CAACY,OAAD,CAAjC,GAA+CJ,GAAtE;AAGAG,IAAAA,MAAM,CAACE,WAAD,CAAN,qCACGC,OADH,EACab,KADb;AAIA,WAAOU,MAAP;AACD,GAVM,EAUJ,EAVI,CAAP;AAWD;;AAiCM,SAASI,iBAAT,CAA2BC,cAA3B,EAAgF;AAAA,MAArCC,WAAqC,uEAAvB,EAAuB;AAAA,MAAnBC,YAAmB,uEAAJ,EAAI;AACrF,SAAOT,gBAAEC,MAAF,CAASM,cAAT,EAAyB,UAACL,MAAD,EAASQ,aAAT,EAA2B;AAEzDR,IAAAA,MAAM,CAACQ,aAAD,CAAN,qBACKF,WADL,MAEKC,YAAY,CAACC,aAAD,CAFjB;AAKA,WAAOR,MAAP;AACD,GARM,EAQJ,EARI,CAAP;AASD","sourcesContent":["import _ from 'lodash';\n\nfunction capitalizeFirstLetter(value) {\n  return value.charAt(0).toUpperCase() + value.slice(1);\n}\n\n/**\n * Creates a set of style variations with the provided name\n * suffixes. This function is useful when creating style variations\n * for styles with shorthands, e.g., margin, padding, etc. This function\n * will return an object with the keys that represent the style variations,\n * and each key will have an object with the provided key and value. Both\n * style variation, and value object keys will get the provided suffixes. The\n * style variation key names are expected to be in snake-case, and value keys\n * are expected to be in camelCase.\n *\n * Example:\n * createVariations('large-margin', ['', 'left', 'right'], 'margin', 30)\n * will return:\n * {\n *   'large-margin': {\n *     margin: 30\n *   },\n *   'large-margin-left': {\n *     marginLeft: 30,\n *   },\n *   'large-margin-right': {\n *     marginRight: 30,\n *   }\n * }\n *\n * @param baseName Base name for style variation Â§names.\n * @param nameSuffixes Suffixes that will be concatenated to baseName.\n * @param key The value key name to use.\n * @param value The value that will be assigned to the key property.\n * @returns {object} An object with the generated style variants.\n */\nexport function createVariations(baseName, nameSuffixes, key, value) {\n  return _.reduce(nameSuffixes, (result, variant) => {\n    const variantName = variant ? `${baseName}-${variant}` : baseName;\n    const keyName = variant ? `${key}${capitalizeFirstLetter(variant)}` : key;\n\n    // eslint-disable-next-line no-param-reassign\n    result[variantName] = {\n      [keyName]: value,\n    };\n\n    return result;\n  }, {});\n}\n\n/**\n * Creates a set of style rules for the provided components. This function\n * is useful when a set of components needs to have the same style. The\n * shared style will be applied to each component. It is also possible to\n * provide custom style for each component that will be applied on top of\n * the shared style.\n *\n * Example:\n * createSharedStyle(['shoutem.ui.Text', 'shoutem.ui.Title'], {\n *   color: 'white'\n * }, {\n *   'shoutem.ui.Title: {\n *     marginBottom: 15\n *   }\n * );\n * will return:\n * {\n *   'shoutem.ui.Text': {\n *     color: 'white'\n *   },\n *   'shoutem.ui.Title': {\n *     color: 'white',\n *     marginBottom: 15\n *   }\n * }\n *\n * @param componentNames The names of the components to generate styles for.\n * @param sharedStyle The style to apply to each component.\n * @param customStyles Style overrides by component names.\n * @returns {object} An object with the generated styles.\n */\nexport function createSharedStyle(componentNames, sharedStyle = {}, customStyles = {}) {\n  return _.reduce(componentNames, (result, componentName) => {\n    // eslint-disable-next-line no-param-reassign\n    result[componentName] = {\n      ...sharedStyle,\n      ...customStyles[componentName],\n    };\n\n    return result;\n  }, {});\n}\n"]},"metadata":{},"sourceType":"script"}