{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCurrentLocation = getCurrentLocation;\nexports.getDriverInfo = getDriverInfo;\nexports.getDriverLocation = getDriverLocation;\nexports.getDistanceFromDriver = getDistanceFromDriver;\nexports.TrackDriverReducer = TrackDriverReducer;\n\nvar _reactAddonsUpdate = _interopRequireDefault(require(\"react-addons-update\"));\n\nvar _constants = _interopRequireDefault(require(\"./constants\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _geolocation = _interopRequireDefault(require(\"@react-native-community/geolocation\"));\n\nvar _request = _interopRequireDefault(require(\"../../util/request\"));\n\nvar _serverCall = _interopRequireDefault(require(\"../../serverCall\"));\n\nvar _farecalculator = _interopRequireDefault(require(\"../../util/farecalculator.js\"));\n\nvar GET_CURRENT_LOCATION = _constants.default.GET_CURRENT_LOCATION,\n    GET_DRIVER_INFORMATION = _constants.default.GET_DRIVER_INFORMATION,\n    GET_DRIVER_LOCATION = _constants.default.GET_DRIVER_LOCATION,\n    GET_DISTANCE_FROM_DRIVER = _constants.default.GET_DISTANCE_FROM_DRIVER;\n\nvar _Dimensions$get = _reactNative.Dimensions.get(\"window\"),\n    width = _Dimensions$get.width,\n    height = _Dimensions$get.height;\n\nvar ASPECT_RATIO = width / height;\nvar LATITUDE_DELTA = 0.0922;\nvar LONGITUDE_DELTA = ASPECT_RATIO * LATITUDE_DELTA;\n\nfunction getCurrentLocation() {\n  return function (dispatch) {\n    _geolocation.default.getCurrentPosition(function (position) {\n      dispatch({\n        type: GET_CURRENT_LOCATION,\n        payload: position\n      });\n    }, function (error) {\n      return console.log(error.message);\n    });\n  };\n}\n\nfunction getDriverInfo() {\n  return function (dispatch, store) {\n    var id = store().home.booking.driverId;\n    (0, _serverCall.default)({\n      method: 'GET',\n      url: \"/api/driver/\" + id\n    }).then(function (res) {\n      console.log(res.body);\n      dispatch({\n        type: GET_DRIVER_INFORMATION,\n        payload: res.body\n      });\n    }).catch(function (error) {\n      console.log(\"GET_DRIVER_INFORMATION\", error);\n    });\n  };\n}\n\nfunction getDriverLocation() {\n  return function (dispatch, store) {\n    var id = store().home.booking.driverId;\n    (0, _serverCall.default)({\n      method: 'GET',\n      url: \"/api/driverLocation/\" + id\n    }).then(function (res) {\n      console.log(res.body);\n      dispatch({\n        type: GET_DRIVER_LOCATION,\n        payload: res.body\n      });\n    }).catch(function (error) {\n      console.log(\"GET_DRIVER_LOCATION\", error);\n    });\n  };\n}\n\nfunction getDistanceFromDriver() {\n  return function (dispatch, store) {\n    if (store().trackDriver.driverLocation) {\n      _request.default.get(\"https://dev.virtualearth.net/REST/v1/Routes/DistanceMatrix\").query({\n        origins: store().home.selectedAddress.selectedPickUp.latitude + \",\" + store().home.selectedAddress.selectedPickUp.longitude,\n        destinations: store().trackDriver.driverLocation.coordinate.coordinates[1] + \",\" + store().trackDriver.driverLocation.coordinate.coordinates[0],\n        travelMode: \"driving\",\n        key: \"Ajfr4PZQDQEuJgGWbAD39XbfQsYbc0zrpKY8B2aYzFxfs0h7dkvF-oGJyV0HS-H-\"\n      }).finish(function (error, res) {\n        dispatch({\n          type: GET_DISTANCE_FROM_DRIVER,\n          payload: res.body\n        });\n      });\n    }\n  };\n}\n\nfunction handleGetCurrentLocation(state, action) {\n  return (0, _reactAddonsUpdate.default)(state, {\n    region: {\n      latitude: {\n        $set: action.payload.coords.latitude\n      },\n      longitude: {\n        $set: action.payload.coords.longitude\n      },\n      latitudeDelta: {\n        $set: LATITUDE_DELTA\n      },\n      longitudeDelta: {\n        $set: LONGITUDE_DELTA\n      }\n    }\n  });\n}\n\nfunction handleGetDriverInfo(state, action) {\n  return (0, _reactAddonsUpdate.default)(state, {\n    driverInfo: {\n      $set: action.payload\n    }\n  });\n}\n\nfunction handleUpdateDriverLocation(state, action) {\n  return (0, _reactAddonsUpdate.default)(state, {\n    driverLocation: {\n      $set: action.payload\n    }\n  });\n}\n\nfunction handleGetDriverLocation(state, action) {\n  return (0, _reactAddonsUpdate.default)(state, {\n    driverLocation: {\n      $set: action.payload\n    },\n    showDriverFound: {\n      $set: false\n    },\n    showCarMaker: {\n      $set: true\n    }\n  });\n}\n\nfunction handleGetDistanceFromDriver(state, action) {\n  return (0, _reactAddonsUpdate.default)(state, {\n    distanceFromDriver: {\n      $set: action.payload\n    }\n  });\n}\n\nfunction handleTripInfo(state, action) {\n  console.log(\"haha\", action.payload);\n  return (0, _reactAddonsUpdate.default)(state, {\n    trip_status: {\n      $set: action.payload\n    }\n  });\n}\n\nvar ACTION_HANDLERS = {\n  GET_CURRENT_LOCATION: handleGetCurrentLocation,\n  GET_DRIVER_INFORMATION: handleGetDriverInfo,\n  UPDATE_DRIVER_LOCATION: handleUpdateDriverLocation,\n  GET_DRIVER_LOCATION: handleGetDriverLocation,\n  GET_DISTANCE_FROM_DRIVER: handleGetDistanceFromDriver,\n  TRIP_STATUS: handleTripInfo\n};\nvar initialState = {\n  region: {},\n  showDriverFound: true\n};\n\nfunction TrackDriverReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var handler = ACTION_HANDLERS[action.type];\n  return handler ? handler(state, action) : state;\n}","map":{"version":3,"sources":["D:/WS/reactws/takearide/src/modules/trackdriver/action.js"],"names":["GET_CURRENT_LOCATION","constants","GET_DRIVER_INFORMATION","GET_DRIVER_LOCATION","GET_DISTANCE_FROM_DRIVER","Dimensions","get","width","height","ASPECT_RATIO","LATITUDE_DELTA","LONGITUDE_DELTA","getCurrentLocation","dispatch","Geolocation","getCurrentPosition","position","type","payload","error","console","log","message","getDriverInfo","store","id","home","booking","driverId","method","url","then","res","body","catch","getDriverLocation","getDistanceFromDriver","trackDriver","driverLocation","request","query","origins","selectedAddress","selectedPickUp","latitude","longitude","destinations","coordinate","coordinates","travelMode","key","finish","handleGetCurrentLocation","state","action","region","$set","coords","latitudeDelta","longitudeDelta","handleGetDriverInfo","driverInfo","handleUpdateDriverLocation","handleGetDriverLocation","showDriverFound","showCarMaker","handleGetDistanceFromDriver","distanceFromDriver","handleTripInfo","trip_status","ACTION_HANDLERS","UPDATE_DRIVER_LOCATION","TRIP_STATUS","initialState","TrackDriverReducer","handler"],"mappings":"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","sourcesContent":["import update from \"react-addons-update\";\r\nimport constants from \"./constants\";\r\nimport { Dimensions } from \"react-native\"\r\nimport Geolocation from '@react-native-community/geolocation';\r\n\r\nimport request from \"../../util/request\";\r\nimport serverCall from '../../serverCall';\r\nimport calculateFare from \"../../util/farecalculator.js\";\r\n\r\n//--------------------\r\n//Constants\r\n//--------------------\r\nconst {\r\n\tGET_CURRENT_LOCATION,\r\n\tGET_DRIVER_INFORMATION,\r\n\tGET_DRIVER_LOCATION,\r\n\tGET_DISTANCE_FROM_DRIVER\r\n} = constants;\r\n\r\nconst { width, height } = Dimensions.get(\"window\");\r\n\r\nconst ASPECT_RATIO = width / height;\r\n\r\nconst LATITUDE_DELTA = 0.0922;\r\nconst LONGITUDE_DELTA = ASPECT_RATIO * LATITUDE_DELTA\r\n\r\n\r\n\r\n//--------------------\r\n//Actions\r\n//--------------------\r\nexport function getCurrentLocation() {\r\n\treturn (dispatch) => {\r\n\t\tGeolocation.getCurrentPosition(\r\n\t\t\t(position) => {\r\n\t\t\t\tdispatch({\r\n\t\t\t\t\ttype: GET_CURRENT_LOCATION,\r\n\t\t\t\t\tpayload: position\r\n\t\t\t\t});\r\n\t\t\t},\r\n\t\t\t(error) => console.log(error.message)\r\n\t\t);\r\n\t}\r\n}\r\n\r\n//Get driver's info\r\n\r\nexport function getDriverInfo() {\r\n\treturn (dispatch, store) => {\r\n\t\tlet id = store().home.booking.driverId;\r\n\t\tserverCall({ method: 'GET', url: `/api/driver/${id}` }).then(res => {\r\n\t\t\tconsole.log(res.body)\r\n\t\t\tdispatch({ type: GET_DRIVER_INFORMATION, payload: res.body });\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.log(\"GET_DRIVER_INFORMATION\", error)\r\n\t\t})\r\n\t}\r\n}\r\n\r\n\r\n//Get initial driver location\r\nexport function getDriverLocation() {\r\n\treturn (dispatch, store) => {\r\n\t\tlet id = store().home.booking.driverId;\r\n\t\tserverCall({ method: 'GET', url: `/api/driverLocation/${id}` }).then(res => {\r\n\t\t\tconsole.log(res.body)\r\n\t\t\tdispatch({ type: GET_DRIVER_LOCATION, payload: res.body });\r\n\t\t}).catch(error => {\r\n\t\t\tconsole.log(\"GET_DRIVER_LOCATION\", error)\r\n\t\t})\r\n\t}\r\n}\r\n\r\n//get distance from driver\r\nexport function getDistanceFromDriver() {\r\n\treturn (dispatch, store) => {\r\n\t\tif (store().trackDriver.driverLocation) {\r\n\t\t\trequest.get(\"https://dev.virtualearth.net/REST/v1/Routes/DistanceMatrix\")\r\n\t\t\t\t.query({\r\n\t\t\t\t\torigins: store().home.selectedAddress.selectedPickUp.latitude +\r\n\t\t\t\t\t\t\",\" + store().home.selectedAddress.selectedPickUp.longitude,\r\n\t\t\t\t\tdestinations: store().trackDriver.driverLocation.coordinate.coordinates[1] +\r\n\t\t\t\t\t\t\",\" + store().trackDriver.driverLocation.coordinate.coordinates[0],\r\n\t\t\t\t\ttravelMode: \"driving\",\r\n\t\t\t\t\tkey: \"Ajfr4PZQDQEuJgGWbAD39XbfQsYbc0zrpKY8B2aYzFxfs0h7dkvF-oGJyV0HS-H-\"\r\n\t\t\t\t})\r\n\t\t\t\t.finish((error, res) => {\r\n\t\t\t\t\tdispatch({\r\n\t\t\t\t\t\ttype: GET_DISTANCE_FROM_DRIVER,\r\n\t\t\t\t\t\tpayload: res.body\r\n\t\t\t\t\t})\r\n\t\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n}\r\n\r\n//--------------------\r\n//Action Handlers\r\n//--------------------\r\nfunction handleGetCurrentLocation(state, action) {\r\n\treturn update(state, {\r\n\t\tregion: {\r\n\t\t\tlatitude: {\r\n\t\t\t\t$set: action.payload.coords.latitude\r\n\t\t\t},\r\n\t\t\tlongitude: {\r\n\t\t\t\t$set: action.payload.coords.longitude\r\n\t\t\t},\r\n\t\t\tlatitudeDelta: {\r\n\t\t\t\t$set: LATITUDE_DELTA\r\n\t\t\t},\r\n\t\t\tlongitudeDelta: {\r\n\t\t\t\t$set: LONGITUDE_DELTA\r\n\t\t\t}\r\n\t\t}\r\n\t})\r\n}\r\n\r\nfunction handleGetDriverInfo(state, action) {\r\n\treturn update(state, {\r\n\t\tdriverInfo: {\r\n\t\t\t$set: action.payload\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction handleUpdateDriverLocation(state, action) {\r\n\treturn update(state, {\r\n\t\tdriverLocation: {\r\n\t\t\t$set: action.payload\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction handleGetDriverLocation(state, action) {\r\n\treturn update(state, {\r\n\t\tdriverLocation: {\r\n\t\t\t$set: action.payload\r\n\t\t},\r\n\t\tshowDriverFound: {\r\n\t\t\t$set: false\r\n\t\t},\r\n\t\tshowCarMaker: {\r\n\t\t\t$set: true\r\n\t\t}\r\n\r\n\t});\r\n}\r\n\r\nfunction handleGetDistanceFromDriver(state, action) {\r\n\treturn update(state, {\r\n\t\tdistanceFromDriver: {\r\n\t\t\t$set: action.payload\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction handleTripInfo(state, action) {\r\n\tconsole.log(\"haha\", action.payload)\r\n\treturn update(state, { trip_status: { $set: action.payload } })\r\n}\r\nconst ACTION_HANDLERS = {\r\n\tGET_CURRENT_LOCATION: handleGetCurrentLocation,\r\n\tGET_DRIVER_INFORMATION: handleGetDriverInfo,\r\n\tUPDATE_DRIVER_LOCATION: handleUpdateDriverLocation,\r\n\tGET_DRIVER_LOCATION: handleGetDriverLocation,\r\n\tGET_DISTANCE_FROM_DRIVER: handleGetDistanceFromDriver,\r\n\tTRIP_STATUS: handleTripInfo\r\n\r\n}\r\nconst initialState = {\r\n\tregion: {},\r\n\tshowDriverFound: true\r\n};\r\n\r\nexport function TrackDriverReducer(state = initialState, action) {\r\n\tconst handler = ACTION_HANDLERS[action.type];\r\n\r\n\treturn handler ? handler(state, action) : state;\r\n}"]},"metadata":{},"sourceType":"script"}