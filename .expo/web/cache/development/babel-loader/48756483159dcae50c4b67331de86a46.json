{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createToolbarAndroidComponent;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _isEqual = _interopRequireDefault(require(\"lodash/isEqual\"));\n\nvar _pick = _interopRequireDefault(require(\"lodash/pick\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"./react-native\");\n\nvar _jsxFileName = \"D:\\\\WS\\\\reactws\\\\takearide\\\\node_modules\\\\react-native-star-rating\\\\node_modules\\\\react-native-vector-icons\\\\lib\\\\toolbar-android.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction createToolbarAndroidComponent(IconNamePropType, getImageSource) {\n  var _class, _temp;\n\n  return _temp = _class = function (_PureComponent) {\n    (0, _inherits2.default)(IconToolbarAndroid, _PureComponent);\n\n    var _super = _createSuper(IconToolbarAndroid);\n\n    function IconToolbarAndroid() {\n      (0, _classCallCheck2.default)(this, IconToolbarAndroid);\n      return _super.apply(this, arguments);\n    }\n\n    (0, _createClass2.default)(IconToolbarAndroid, [{\n      key: \"componentWillMount\",\n      value: function componentWillMount() {\n        this.updateIconSources(this.props);\n      }\n    }, {\n      key: \"componentWillReceiveProps\",\n      value: function componentWillReceiveProps(nextProps) {\n        var _this = this;\n\n        var keys = Object.keys(IconToolbarAndroid.propTypes);\n\n        if (!(0, _isEqual.default)((0, _pick.default)(nextProps, keys), (0, _pick.default)(this.props, keys))) {\n          var stateToEvict = {};\n\n          if (!nextProps.logoName) {\n            stateToEvict.logo = undefined;\n          }\n\n          if (!nextProps.navIconName) {\n            stateToEvict.navIcon = undefined;\n          }\n\n          if (!nextProps.overflowIconName) {\n            stateToEvict.overflowIcon = undefined;\n          }\n\n          if (this.state && Object.keys(stateToEvict).length) {\n            this.setState(stateToEvict, function () {\n              return _this.updateIconSources(nextProps);\n            });\n          } else {\n            this.updateIconSources(nextProps);\n          }\n        }\n      }\n    }, {\n      key: \"updateIconSources\",\n      value: function updateIconSources(props) {\n        var _this2 = this;\n\n        var size = props.iconSize;\n        var color = props.iconColor || props.titleColor;\n\n        if (props.logoName) {\n          getImageSource(props.logoName, size, color).then(function (logo) {\n            return _this2.setState({\n              logo: logo\n            });\n          });\n        }\n\n        if (props.navIconName) {\n          getImageSource(props.navIconName, size, color).then(function (navIcon) {\n            return _this2.setState({\n              navIcon: navIcon\n            });\n          });\n        }\n\n        if (props.overflowIconName) {\n          getImageSource(props.overflowIconName, size, color).then(function (overflowIcon) {\n            return _this2.setState({\n              overflowIcon: overflowIcon\n            });\n          });\n        }\n\n        Promise.all((props.actions || []).map(function (action) {\n          if (action.iconName) {\n            return getImageSource(action.iconName, action.iconSize || size, action.iconColor || color).then(function (icon) {\n              return _objectSpread({}, action, {\n                icon: icon\n              });\n            });\n          }\n\n          return Promise.resolve(action);\n        })).then(function (actions) {\n          return _this2.setState({\n            actions: actions\n          });\n        });\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        return _react.default.createElement(_reactNative.ToolbarAndroid, (0, _extends2.default)({}, this.props, this.state, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 14\n          }\n        }));\n      }\n    }]);\n    return IconToolbarAndroid;\n  }(_react.PureComponent), _class.propTypes = {\n    logoName: IconNamePropType,\n    navIconName: IconNamePropType,\n    overflowIconName: IconNamePropType,\n    actions: _propTypes.default.arrayOf(_propTypes.default.shape({\n      title: _propTypes.default.string.isRequired,\n      iconName: IconNamePropType,\n      iconSize: _propTypes.default.number,\n      iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number]),\n      show: _propTypes.default.oneOf(['always', 'ifRoom', 'never']),\n      showWithText: _propTypes.default.bool\n    })),\n    iconSize: _propTypes.default.number,\n    iconColor: _propTypes.default.oneOfType([_propTypes.default.string, _propTypes.default.number])\n  }, _class.defaultProps = {\n    iconSize: 24\n  }, _temp;\n}","map":{"version":3,"sources":["D:/WS/reactws/takearide/node_modules/react-native-star-rating/node_modules/react-native-vector-icons/lib/toolbar-android.js"],"names":["createToolbarAndroidComponent","IconNamePropType","getImageSource","updateIconSources","props","nextProps","keys","Object","IconToolbarAndroid","propTypes","stateToEvict","logoName","logo","undefined","navIconName","navIcon","overflowIconName","overflowIcon","state","length","setState","size","iconSize","color","iconColor","titleColor","then","Promise","all","actions","map","action","iconName","icon","resolve","PureComponent","PropTypes","arrayOf","shape","title","string","isRequired","number","oneOfType","show","oneOf","showWithText","bool","defaultProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/no-unused-prop-types */\nimport isEqual from 'lodash/isEqual';\nimport pick from 'lodash/pick';\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolbarAndroid } from './react-native';\n\nexport default function createToolbarAndroidComponent(\n  IconNamePropType,\n  getImageSource\n) {\n  return class IconToolbarAndroid extends PureComponent {\n    static propTypes = {\n      logoName: IconNamePropType,\n      navIconName: IconNamePropType,\n      overflowIconName: IconNamePropType,\n      actions: PropTypes.arrayOf(\n        PropTypes.shape({\n          title: PropTypes.string.isRequired,\n          iconName: IconNamePropType,\n          iconSize: PropTypes.number,\n          iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n          show: PropTypes.oneOf(['always', 'ifRoom', 'never']),\n          showWithText: PropTypes.bool,\n        })\n      ),\n      iconSize: PropTypes.number,\n      iconColor: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    };\n\n    static defaultProps = {\n      iconSize: 24,\n    };\n\n    componentWillMount() {\n      this.updateIconSources(this.props);\n    }\n\n    componentWillReceiveProps(nextProps) {\n      const keys = Object.keys(IconToolbarAndroid.propTypes);\n      if (!isEqual(pick(nextProps, keys), pick(this.props, keys))) {\n        const stateToEvict = {};\n        if (!nextProps.logoName) {\n          stateToEvict.logo = undefined;\n        }\n        if (!nextProps.navIconName) {\n          stateToEvict.navIcon = undefined;\n        }\n        if (!nextProps.overflowIconName) {\n          stateToEvict.overflowIcon = undefined;\n        }\n        if (this.state && Object.keys(stateToEvict).length) {\n          this.setState(stateToEvict, () => this.updateIconSources(nextProps));\n        } else {\n          this.updateIconSources(nextProps);\n        }\n      }\n    }\n\n    updateIconSources(props) {\n      const size = props.iconSize;\n      const color = props.iconColor || props.titleColor;\n      if (props.logoName) {\n        getImageSource(props.logoName, size, color).then(logo =>\n          this.setState({ logo })\n        );\n      }\n      if (props.navIconName) {\n        getImageSource(props.navIconName, size, color).then(navIcon =>\n          this.setState({ navIcon })\n        );\n      }\n      if (props.overflowIconName) {\n        getImageSource(props.overflowIconName, size, color).then(overflowIcon =>\n          this.setState({ overflowIcon })\n        );\n      }\n\n      Promise.all(\n        (props.actions || []).map(action => {\n          if (action.iconName) {\n            return getImageSource(\n              action.iconName,\n              action.iconSize || size,\n              action.iconColor || color\n            ).then(icon => ({ ...action, icon }));\n          }\n          return Promise.resolve(action);\n        })\n      ).then(actions => this.setState({ actions }));\n    }\n\n    render() {\n      return <ToolbarAndroid {...this.props} {...this.state} />;\n    }\n  };\n}\n"]},"metadata":{},"sourceType":"script"}