{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resolveIncludes;\nexports.INCLUDE = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _ = _interopRequireWildcard(require(\"lodash\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar INCLUDE = '@@shoutem.theme/include';\nexports.INCLUDE = INCLUDE;\n\nfunction includeSymbolMergeHandler(objVal, srcVal) {\n  var newObjVal = objVal;\n  var include;\n\n  if (srcVal && srcVal[INCLUDE]) {\n    include = newObjVal && newObjVal[INCLUDE] ? [].concat((0, _toConsumableArray2.default)(newObjVal[INCLUDE]), (0, _toConsumableArray2.default)(srcVal[INCLUDE])) : srcVal[INCLUDE];\n  }\n\n  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {\n    var newObj = _.mergeWith({}, srcVal, function (o, s) {\n      return s;\n    });\n\n    if (include) {\n      newObj[INCLUDE] = include;\n    }\n\n    return newObj;\n  }\n\n  if (_.isPlainObject(newObjVal) && include) {\n    newObjVal[INCLUDE] = include;\n  }\n}\n\nfunction resolveIncludes(target) {\n  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  function getStyle(styleName) {\n    var defaultStyle = {};\n    var style = defaultStyle;\n    var baseStyle = base[styleName];\n\n    if (baseStyle) {\n      if (baseStyle[INCLUDE]) {\n        throw Error(\"Base style cannot have includes, unexpected include in \" + styleName + \".\");\n      }\n\n      style = _objectSpread({}, baseStyle);\n    }\n\n    var targetStyle = target[styleName];\n\n    if (targetStyle) {\n      style = _objectSpread({}, style, {}, targetStyle);\n    }\n\n    if (style === defaultStyle) {\n      console.warn(\"Including unexisting style: \" + styleName);\n    }\n\n    return style;\n  }\n\n  function includeNodeStyles(styleNode, processingStyleNames) {\n    if (!_.isPlainObject(styleNode)) {\n      return styleNode;\n    }\n\n    var styleNamesToInclude = styleNode[INCLUDE];\n    var stylesToInclude = {};\n\n    if (styleNamesToInclude) {\n      if (!_.isArray(styleNamesToInclude)) {\n        throw Error('Include should be array');\n      }\n\n      for (var _iterator = _createForOfIteratorHelperLoose(styleNamesToInclude), _step; !(_step = _iterator()).done;) {\n        var styleName = _step.value;\n\n        if (processingStyleNames.has(styleName)) {\n          throw Error(\"Circular style include, including \" + styleName);\n        }\n\n        processingStyleNames.add(styleName);\n        stylesToInclude = _.mergeWith({}, stylesToInclude, includeNodeStyles(getStyle(styleName), processingStyleNames), includeSymbolMergeHandler);\n        processingStyleNames.delete(styleName);\n      }\n    }\n\n    var resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);\n\n    delete resultingStyle[INCLUDE];\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(_.keys(resultingStyle)), _step2; !(_step2 = _iterator2()).done;) {\n      var _styleName = _step2.value;\n      resultingStyle[_styleName] = includeNodeStyles(resultingStyle[_styleName], processingStyleNames);\n    }\n\n    return resultingStyle;\n  }\n\n  var processingStyleNames = new Set();\n  return includeNodeStyles(target, processingStyleNames);\n}","map":{"version":3,"sources":["D:/WS/reactws/takearide/node_modules/native-base-shoutem-theme/src/resolveIncludes.js"],"names":["INCLUDE","includeSymbolMergeHandler","objVal","srcVal","newObjVal","include","_","isUndefined","isPlainObject","newObj","mergeWith","o","s","resolveIncludes","target","base","getStyle","styleName","defaultStyle","style","baseStyle","Error","targetStyle","console","warn","includeNodeStyles","styleNode","processingStyleNames","styleNamesToInclude","stylesToInclude","isArray","has","add","delete","resultingStyle","keys","Set"],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nexport const INCLUDE = '@@shoutem.theme/include';\n\n/**\n * Customizer function for lodash mergeWith which handle INCLUDE symbol.\n * Lodash merge/mergeWith functions doesn't merge symbols\n * and we use INCLUDE symbol to define which style we want to include.\n */\n// eslint-disable-next-line consistent-return\nfunction includeSymbolMergeHandler(objVal, srcVal) {\n  const newObjVal = objVal;\n  let include;\n\n  if (srcVal && srcVal[INCLUDE]) {\n    include = newObjVal && newObjVal[INCLUDE] ?\n      [...newObjVal[INCLUDE], ...srcVal[INCLUDE]] : srcVal[INCLUDE];\n  }\n\n  // if objVal doesn't exists create new from source\n  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {\n    // Copy symbol fix.\n    // { ...srcVal } copies symbol wrong, it adds symbol value to the property defined just after it\n    // Problem example: { SYMBOL: ['Test'], someProp: 10 } => { someProp: ['Test'] }\n    // mergeWith prevents wrong copy because it doesn't iterate trough Symbols so it skips INCLUDE\n    // We do not INCLUDE symbol to be copied actually in this function\n    // because it is copied manually. This whole function is fixing Symbol problems.\n    const newObj = _.mergeWith({}, srcVal, (o, s) => s);\n    // Assigning INCLUDE after object definition to avoid Object.assign when code transpiled.\n    // Object.assign in RN uses polyfill which doesn't copy Symbols that's why INCLUDE symbol\n    // must be set manually after spread.\n    // TODO(Braco) - once Object.assign polyfill is no longer used use commented code bellow\n    // Check if `customizer` is needed still at all after polyfill is removed!\n    // return { ...srcVal, [INCLUDE]: include }; // add new lines for each property\n    if (include) {\n      newObj[INCLUDE] = include;\n    }\n    return newObj;\n  }\n\n  // otherwise let lodash default merge (return undefined)\n  // and add INCLUDE to objVal if any in srcVal\n  if (_.isPlainObject(newObjVal) && include) {\n    newObjVal[INCLUDE] = include;\n  }\n}\n\n/**\n * Recursively include required target styles from target and base root.\n *\n * @param target - styles object containing\n * @param base - additional style object from which target may include style\n */\nexport default function resolveIncludes(target, base = {}) {\n  /**\n   * Include process steps:\n   * 1. Iterate through target object, check if property is object and if it has [INCLUDE]\n   * 2.a. If property is object, repeat process for that object\n   * 2.b. If property is not object leave value as is\n   * 3. Include any [INCLUDE] (required style)\n   *  1. Repeat process for required style (check if it has any [INCLUDE])\n   */\n\n  /**\n   * Merges style from target and base.\n   * Target style overrides base.\n   * @param styleName - style name to include\n   */\n  function getStyle(styleName) {\n    const defaultStyle = {};\n    let style = defaultStyle;\n\n    const baseStyle = base[styleName];\n    if (baseStyle) {\n      if (baseStyle[INCLUDE]) {\n        throw Error(`Base style cannot have includes, unexpected include in ${styleName}.`);\n      }\n      style = { ...baseStyle };\n    }\n\n    const targetStyle = target[styleName];\n    if (targetStyle) {\n      style = {\n        ...style,\n        ...targetStyle,\n      };\n    }\n\n    if (style === defaultStyle) {\n      console.warn(`Including unexisting style: ${styleName}`);\n    }\n\n    return style;\n  }\n\n  // Includes all styles required by using the INCLUDE symbol\n  // on the styleNode object level, and recursively calls itself\n  // for all nested style objects. After calling this function, the\n  // styleNode object will be fully processed, i.e., all styles\n  // required by this object, and any of its children will be resolved.\n  function includeNodeStyles(styleNode, processingStyleNames) {\n    if (!_.isPlainObject(styleNode)) {\n      return styleNode;\n    }\n\n    // Style names which current style node want to include\n    const styleNamesToInclude = styleNode[INCLUDE];\n\n    let stylesToInclude = {};\n    if (styleNamesToInclude) {\n      if (!_.isArray(styleNamesToInclude)) {\n        throw Error('Include should be array');\n      }\n\n      for (const styleName of styleNamesToInclude) {\n        if (processingStyleNames.has(styleName)) {\n          throw Error(`Circular style include, including ${styleName}`);\n        }\n        processingStyleNames.add(styleName);\n        stylesToInclude = _.mergeWith(\n          {},\n          stylesToInclude,\n          includeNodeStyles(getStyle(styleName), processingStyleNames),\n          includeSymbolMergeHandler\n        );\n        processingStyleNames.delete(styleName);\n      }\n    }\n\n    const resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);\n    delete resultingStyle[INCLUDE];\n\n    for (const styleName of _.keys(resultingStyle)) {\n      resultingStyle[styleName] =\n        includeNodeStyles(resultingStyle[styleName], processingStyleNames);\n    }\n    return resultingStyle;\n  }\n\n  // A that holds all style names that are currently\n  // being processed. This is used to detect include\n  // cycles.\n  const processingStyleNames = new Set();\n  return includeNodeStyles(target, processingStyleNames);\n}\n"]},"metadata":{},"sourceType":"script"}