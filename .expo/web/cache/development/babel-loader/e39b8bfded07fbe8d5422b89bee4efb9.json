instanceGroupManagers.insert({
         *     // Project ID for this request.
         *     project:
         *       '(?:(?:[-a-z0-9]{1,63}.)*(?:[a-z](?:[-a-z0-9]{0,61}[a-z0-9])?):)?(?:[0-9]{1,19}|(?:[a-z0-9](?:[-a-z0-9]{0,61}[a-z0-9])?))',
         *     // An optional request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed.
         *     //
         *     // For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments.
         *     //
         *     // The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).
         *     requestId: 'placeholder-value',
         *     // The name of the zone where you want to create the managed instance group.
         *     zone: 'placeholder-value',
         *
         *     // Request body metadata
         *     requestBody: {
         *       // request body parameters
         *       // {
         *       //   "autoHealingPolicies": [],
         *       //   "baseInstanceName": "my_baseInstanceName",
         *       //   "creationTimestamp": "my_creationTimestamp",
         *       //   "currentActions": {},
         *       //   "description": "my_description",
         *       //   "distributionPolicy": {},
         *       //   "failoverAction": "my_failoverAction",
         *       //   "fingerprint": "my_fingerprint",
         *       //   "id": "my_id",
         *       //   "instanceGroup": "my_instanceGroup",
         *       //   "instanceTemplate": "my_instanceTemplate",
         *       //   "kind": "my_kind",
         *       //   "name": "my_name",
         *       //   "namedPorts": [],
         *       //   "pendingActions": {},
         *       //   "region": "my_region",
         *       //   "selfLink": "my_selfLink",
         *       //   "selfLinkWithId": "my_selfLinkWithId",
         *       //   "serviceAccount": "my_serviceAccount",
         *       //   "statefulPolicy": {},
         *       //   "status": {},
         *       //   "targetPools": [],
         *       //   "targetSize": 0,
         *       //   "updatePolicy": {},
         *       //   "versions": [],
         *       //   "zone": "my_zone"
         *       // }
         *     },
         *   });
         *   console.log(res.data);
         *
         *   // Example response
         *   // {
         *   //   "clientOperationId": "my_clientOperationId",
         *   //   "creationTimestamp": "my_creationTimestamp",
         *   //   "description": "my_description",
         *   //   "endTime": "my_endTime",
         *   //   "error": {},
         *   //   "httpErrorMessage": "my_httpErrorMessage",
         *   //   "httpErrorStatusCode": 0,
         *   //   "id": "my_id",
         *   //   "insertTime": "my_insertTime",
         *   //   "kind": "my_kind",
         *   //   "name": "my_name",
         *   //   "operationType": "my_operationType",
         *   //   "progress": 0,
         *   //   "region": "my_region",
         *   //   "selfLink": "my_selfLink",
         *   //   "selfLinkWithId": "my_selfLinkWithId",
         *   //   "startTime": "my_startTime",
         *   //   "status": "my_status",
         *   //   "statusMessage": "my_statusMessage",
         *   //   "targetId": "my_targetId",
         *   //   "targetLink": "my_targetLink",
         *   //   "user": "my_user",
         *   //   "warnings": [],
         *   //   "zone": "my_zone"
         *   // }
         * }
         *
         * main().catch(e => {
         *   console.error(e);
         *   throw e;
         * });
         *
         * ```
         *
         * @param params - Parameters for request
         * @param options - Optionally override request options, such as `url`, `method`, and `encoding`.
         * @param callback - Optional callback that handles the response.
         * @returns A promise if used with async/await, or void if used with a callback.
         */
        insert(params: Params$Resource$Instancegroupmanagers$Insert, options: StreamMethodOptions): GaxiosPromise<Readable>;
        insert(params?: Params$Resource$Instancegroupmanagers$Insert, options?: MethodOptions): GaxiosPromise<Schema$Operation>;
        insert(params: Params$Resource$Instancegroupmanagers$Insert, options: StreamMethodOptions | BodyResponseCallback<Readable>, callback: BodyResponseCallback<Readable>): void;
        insert(params: Params$Resource$Instancegroupmanagers$Insert, options: MethodOptions | BodyResponseCallback<Schema$Operation>, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(params: Params$Resource$Instancegroupmanagers$Insert, callback: BodyResponseCallback<Schema$Operation>): void;
        insert(callback: BodyResponseCallback<Schema$Operation>): void;
        /**
         * Retrieves a list of managed instance groups that are contained within the specified project and zone.
         * @example
         * ```js
         * // Before running the sample:
         * // - Enable the API at:
         * //   https://console.developers.google.com/apis/api/compute.googleapis.com
         * // - Login into gcloud by running:
         * //   `$ gcloud auth application-default login`
         * // - Install the npm module by running:
         * //   `$ npm install googleapis`
         *
         * const {google} = require('googleapis');
         * const compute = google.compute('alpha');
         *
         * async function main() {
         *   const auth = new google.auth.GoogleAuth({
         *     // Scopes can be specified either as an array or as a single, space-delimited string.
         *     scopes: [
         *       'https://www.googleapis.com/auth/cloud-platform',
         *       'https://www.googleapis.com/auth/compute',
         *       'https://www.googleapis.com/auth/compute.readonly',
         *     ],
         *   });
        