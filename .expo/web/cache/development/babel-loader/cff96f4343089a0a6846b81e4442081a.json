{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar React = _interopRequireWildcard(require(\"react\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar NavigationBuilderContext = React.createContext({\n  onDispatchAction: function onDispatchAction() {\n    return undefined;\n  },\n  onOptionsChange: function onOptionsChange() {\n    return undefined;\n  }\n});\nvar _default = NavigationBuilderContext;\nexports.default = _default;","map":{"version":3,"sources":["NavigationBuilderContext.tsx"],"names":["NavigationBuilderContext","onDispatchAction","onOptionsChange","undefined"],"mappings":";;;;;AAAA;;;;;;AA0BA,IAAMA,wBAAwB,GAAG,KAAK,CAAL,aAAA,CAW9B;AACDC,EAAAA,gBAAgB,EAAE;AAAA,WADjB,SACiB;AAAA,GADjB;AAEDC,EAAAA,eAAe,EAAE;AAAA,WAAMC,SAAN;AAAA;AAFhB,CAX8B,CAAjC;eAgBA,wB","sourcesContent":["import * as React from 'react';\nimport type {\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n} from '@react-navigation/routers';\nimport type { NavigationHelpers } from './types';\n\nexport type ChildActionListener = (\n  action: NavigationAction,\n  visitedNavigators?: Set<string>\n) => boolean;\n\nexport type FocusedNavigationCallback<T> = (\n  navigation: NavigationHelpers<ParamListBase>\n) => T;\n\nexport type FocusedNavigationListener = <T>(\n  callback: FocusedNavigationCallback<T>\n) => { handled: boolean; result: T };\n\nexport type NavigatorStateGetter = () => NavigationState;\n\n/**\n * Context which holds the required helpers needed to build nested navigators.\n */\nconst NavigationBuilderContext = React.createContext<{\n  onAction?: (\n    action: NavigationAction,\n    visitedNavigators?: Set<string>\n  ) => boolean;\n  addActionListener?: (listener: ChildActionListener) => void;\n  addFocusedListener?: (listener: FocusedNavigationListener) => void;\n  onRouteFocus?: (key: string) => void;\n  onDispatchAction: (action: NavigationAction, noop: boolean) => void;\n  addStateGetter?: (key: string, getter: NavigatorStateGetter) => void;\n  onOptionsChange: (options: object) => void;\n}>({\n  onDispatchAction: () => undefined,\n  onOptionsChange: () => undefined,\n});\n\nexport default NavigationBuilderContext;\n"]},"metadata":{},"sourceType":"script"}