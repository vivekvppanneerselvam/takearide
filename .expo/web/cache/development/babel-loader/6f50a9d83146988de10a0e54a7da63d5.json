{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar toStatus = function toStatus(validation) {\n  return validation.isValid ? \"valid\" : validation.isPotentiallyValid ? \"incomplete\" : \"invalid\";\n};\n\nvar FALLBACK_CARD = {\n  gaps: [4, 8, 12],\n  lengths: [16],\n  code: {\n    size: 3\n  }\n};\n\nvar CCFieldValidator = function CCFieldValidator(displayedFields, validatePostalCode) {\n  var _this = this;\n\n  (0, _classCallCheck2.default)(this, CCFieldValidator);\n\n  this.validateValues = function (formValues) {\n    var numberValidation = formValues.number;\n    var expiryValidation = formValues.expiry;\n    var maxCVCLength = (numberValidation.card || FALLBACK_CARD).code.size;\n    var cvcValidation = formValues.cvc;\n\n    var validationStatuses = _.pick({\n      number: toStatus(numberValidation),\n      expiry: toStatus(expiryValidation),\n      cvc: toStatus(cvcValidation),\n      name: !!formValues.name ? \"valid\" : \"incomplete\",\n      postalCode: _this._validatePostalCode(formValues.postalCode)\n    }, _this._displayedFields);\n\n    return {\n      valid: _.every(_.values(validationStatuses), function (status) {\n        return status === \"valid\";\n      }),\n      status: validationStatuses\n    };\n  };\n\n  this._displayedFields = displayedFields;\n  this._validatePostalCode = validatePostalCode;\n};\n\nexports.default = CCFieldValidator;","map":{"version":3,"sources":["D:/WS/reactws/takearide/src/modules/payment/component/ccfieldvalidator.js"],"names":["toStatus","validation","isValid","isPotentiallyValid","FALLBACK_CARD","gaps","lengths","code","size","CCFieldValidator","displayedFields","validatePostalCode","validateValues","formValues","numberValidation","number","expiryValidation","expiry","maxCVCLength","card","cvcValidation","cvc","validationStatuses","_","pick","name","postalCode","_validatePostalCode","_displayedFields","valid","every","values","status"],"mappings":";;;;;;;;;AAKA,IAAMA,QAAQ,GAAG,SAAXA,QAAW,CAAAC,UAAU,EAAI;AAC7B,SAAOA,UAAU,CAACC,OAAX,GAAqB,OAArB,GACAD,UAAU,CAACE,kBAAX,GAAgC,YAAhC,GACA,SAFP;AAGD,CAJD;;AAMA,IAAMC,aAAa,GAAG;AAAEC,EAAAA,IAAI,EAAE,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,CAAR;AAAoBC,EAAAA,OAAO,EAAE,CAAC,EAAD,CAA7B;AAAmCC,EAAAA,IAAI,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR;AAAzC,CAAtB;;IACqBC,gB,GACnB,0BAAYC,eAAZ,EAA6BC,kBAA7B,EAAiD;AAAA;;AAAA;;AAAA,OAKjDC,cALiD,GAKhC,UAACC,UAAD,EAAgB;AAC/B,QAAMC,gBAAgB,GAAsBD,UAAU,CAACE,MAAvD;AACA,QAAMC,gBAAgB,GAA8BH,UAAU,CAACI,MAA/D;AACA,QAAMC,YAAY,GAAG,CAACJ,gBAAgB,CAACK,IAAjB,IAAyBf,aAA1B,EAAyCG,IAAzC,CAA8CC,IAAnE;AACA,QAAMY,aAAa,GAAmBP,UAAU,CAACQ,GAAjD;;AAEA,QAAMC,kBAAkB,GAAGC,CAAC,CAACC,IAAF,CAAO;AAChCT,MAAAA,MAAM,EAAEf,QAAQ,CAACc,gBAAD,CADgB;AAEhCG,MAAAA,MAAM,EAAEjB,QAAQ,CAACgB,gBAAD,CAFgB;AAGhCK,MAAAA,GAAG,EAAErB,QAAQ,CAACoB,aAAD,CAHmB;AAIhCK,MAAAA,IAAI,EAAE,CAAC,CAACZ,UAAU,CAACY,IAAb,GAAoB,OAApB,GAA8B,YAJJ;AAKhCC,MAAAA,UAAU,EAAE,KAAI,CAACC,mBAAL,CAAyBd,UAAU,CAACa,UAApC;AALoB,KAAP,EAMxB,KAAI,CAACE,gBANmB,CAA3B;;AAQA,WAAO;AACLC,MAAAA,KAAK,EAAEN,CAAC,CAACO,KAAF,CAAQP,CAAC,CAACQ,MAAF,CAAST,kBAAT,CAAR,EAAsC,UAAAU,MAAM;AAAA,eAAIA,MAAM,KAAK,OAAf;AAAA,OAA5C,CADF;AAELA,MAAAA,MAAM,EAAEV;AAFH,KAAP;AAID,GAvBgD;;AAC/C,OAAKM,gBAAL,GAAwBlB,eAAxB;AACA,OAAKiB,mBAAL,GAA2BhB,kBAA3B;AACD,C","sourcesContent":["//import valid from \"card-validator\";\r\n/* import pick from \"lodash.pick\";\r\nimport values from \"lodash.values\";\r\nimport every from \"lodash.every\"; */\r\n\r\nconst toStatus = validation => {\r\n  return validation.isValid ? \"valid\" :\r\n         validation.isPotentiallyValid ? \"incomplete\" :\r\n         \"invalid\";\r\n};\r\n\r\nconst FALLBACK_CARD = { gaps: [4, 8, 12], lengths: [16], code: { size: 3 } };\r\nexport default class CCFieldValidator {\r\n  constructor(displayedFields, validatePostalCode) {\r\n    this._displayedFields = displayedFields;\r\n    this._validatePostalCode = validatePostalCode;\r\n  }\r\n\r\n  validateValues = (formValues) => {\r\n    const numberValidation =/*  valid.number( */formValues.number/* ) */;\r\n    const expiryValidation = /* valid.expirationDate( */formValues.expiry/* ) */;\r\n    const maxCVCLength = (numberValidation.card || FALLBACK_CARD).code.size;\r\n    const cvcValidation = /* valid.cvv( */formValues.cvc/*, maxCVCLength ) */;\r\n\r\n    const validationStatuses = _.pick({\r\n      number: toStatus(numberValidation),\r\n      expiry: toStatus(expiryValidation),\r\n      cvc: toStatus(cvcValidation),\r\n      name: !!formValues.name ? \"valid\" : \"incomplete\",\r\n      postalCode: this._validatePostalCode(formValues.postalCode),\r\n    }, this._displayedFields);\r\n\r\n    return {\r\n      valid: _.every(_.values(validationStatuses), status => status === \"valid\"),\r\n      status: validationStatuses,\r\n    };\r\n  };\r\n}"]},"metadata":{},"sourceType":"script"}