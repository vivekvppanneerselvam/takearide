{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ThemeShape = exports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _propTypes = require(\"prop-types\");\n\nvar _resolveIncludes = _interopRequireDefault(require(\"./resolveIncludes\"));\n\nvar _mergeComponentAndThemeStyles = _interopRequireDefault(require(\"./mergeComponentAndThemeStyles\"));\n\nvar _normalizeStyle = _interopRequireDefault(require(\"./StyleNormalizer/normalizeStyle\"));\n\nvar THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nvar THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\nvar defaultTheme;\n\nvar resolveStyle = function resolveStyle(style, baseStyle) {\n  return (0, _normalizeStyle.default)((0, _resolveIncludes.default)(style, baseStyle));\n};\n\nvar Theme = function () {\n  function Theme(themeStyle) {\n    (0, _classCallCheck2.default)(this, Theme);\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n\n  (0, _createClass2.default)(Theme, [{\n    key: \"createComponentStyle\",\n    value: function createComponentStyle(componentName, defaultStyle) {\n      if (this[THEME_STYLE_CACHE][componentName]) {\n        return this[THEME_STYLE_CACHE][componentName];\n      }\n\n      var componentIncludedStyle = resolveStyle(defaultStyle, this[THEME_STYLE]);\n      this[THEME_STYLE_CACHE][componentName] = (0, _mergeComponentAndThemeStyles.default)(componentIncludedStyle, this[THEME_STYLE][componentName], this[THEME_STYLE]);\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n  }], [{\n    key: \"setDefaultThemeStyle\",\n    value: function setDefaultThemeStyle(style) {\n      defaultTheme = new Theme(style);\n    }\n  }, {\n    key: \"getDefaultTheme\",\n    value: function getDefaultTheme() {\n      if (!defaultTheme) {\n        defaultTheme = new Theme({});\n      }\n\n      return defaultTheme;\n    }\n  }]);\n  return Theme;\n}();\n\nexports.default = Theme;\n\nvar ThemeShape = _propTypes.PropTypes.shape({\n  createComponentStyle: _propTypes.PropTypes.func.isRequired\n});\n\nexports.ThemeShape = ThemeShape;","map":{"version":3,"sources":["D:/WS/reactws/takearide/node_modules/native-base-shoutem-theme/src/Theme.js"],"names":["THEME_STYLE","THEME_STYLE_CACHE","defaultTheme","resolveStyle","style","baseStyle","Theme","themeStyle","componentName","defaultStyle","componentIncludedStyle","ThemeShape","PropTypes","shape","createComponentStyle","func","isRequired"],"mappings":";;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AAGA,IAAMA,WAAW,GAAG,4BAApB;AACA,IAAMC,iBAAiB,GAAG,kCAA1B;AAEA,IAAIC,YAAJ;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,SAAR;AAAA,SACnB,6BAAe,8BAAgBD,KAAhB,EAAuBC,SAAvB,CAAf,CADmB;AAAA,CAArB;;IA2BqBC,K;AACnB,iBAAYC,UAAZ,EAAwB;AAAA;AACtB,SAAKP,WAAL,IAAoBG,YAAY,CAACI,UAAD,CAAhC;AACA,SAAKN,iBAAL,IAA0B,EAA1B;AACD;;;;yCAgCoBO,a,EAAeC,Y,EAAc;AAChD,UAAI,KAAKR,iBAAL,EAAwBO,aAAxB,CAAJ,EAA4C;AAC1C,eAAO,KAAKP,iBAAL,EAAwBO,aAAxB,CAAP;AACD;;AAED,UAAME,sBAAsB,GAAGP,YAAY,CACzCM,YADyC,EAEzC,KAAKT,WAAL,CAFyC,CAA3C;AAUA,WAAKC,iBAAL,EAAwBO,aAAxB,IAAyC,2CACvCE,sBADuC,EAEvC,KAAKV,WAAL,EAAkBQ,aAAlB,CAFuC,EAGvC,KAAKR,WAAL,CAHuC,CAAzC;AAMA,aAAO,KAAKC,iBAAL,EAAwBO,aAAxB,CAAP;AACD;;;yCAjD2BJ,K,EAAO;AACjCF,MAAAA,YAAY,GAAG,IAAII,KAAJ,CAAUF,KAAV,CAAf;AACD;;;sCAMwB;AACvB,UAAI,CAACF,YAAL,EAAmB;AACjBA,QAAAA,YAAY,GAAG,IAAII,KAAJ,CAAU,EAAV,CAAf;AACD;;AAED,aAAOJ,YAAP;AACD;;;;;;;AAsCI,IAAMS,UAAU,GAAGC,qBAAUC,KAAV,CAAgB;AACxCC,EAAAA,oBAAoB,EAAEF,qBAAUG,IAAV,CAAeC;AADG,CAAhB,CAAnB","sourcesContent":["import { PropTypes } from \"prop-types\";\nimport resolveIncludes from \"./resolveIncludes\";\nimport mergeComponentAndThemeStyles from \"./mergeComponentAndThemeStyles\";\nimport normalizeStyle from \"./StyleNormalizer/normalizeStyle\";\n\n// Privates, ideally those should be symbols\nconst THEME_STYLE = \"@@shoutem.theme/themeStyle\";\nconst THEME_STYLE_CACHE = \"@@shoutem.theme/themeCachedStyle\";\n\nlet defaultTheme;\n\nconst resolveStyle = (style, baseStyle) =>\n  normalizeStyle(resolveIncludes(style, baseStyle));\n\n/**\n * The theme defines the application style, and provides methods to\n * resolve the style for a specific component.\n *\n * A theme style is a JavaScript object that contains the\n * React Native style rules, with several additional features:\n * 1. Style rules may be nested arbitrarily\n * 2. Top level keys may target specific components by using their fully qualified name\n * 3. INCLUDE keyword may be used to include any top level style key rules in any other style key\n *\n * Top level keys in a theme are usually some shared styles and component styles, e.g.:\n * {\n *   // Shared style\n *   baseFont: {\n *     fontFamily: '...'\n *   },\n *\n *   // Style that will be applied to shoutem.ui.Text component\n *   'shoutem.ui.Text': {\n *     [INCLUDE]: ['baseFont'],\n *     color: 'black'\n *   }\n * }\n */\nexport default class Theme {\n  constructor(themeStyle) {\n    this[THEME_STYLE] = resolveStyle(themeStyle);\n    this[THEME_STYLE_CACHE] = {};\n  }\n\n  /**\n   * Sets the given style as a default theme style.\n   */\n  static setDefaultThemeStyle(style) {\n    defaultTheme = new Theme(style);\n  }\n\n  /**\n   * Returns the default theme that will be used as fallback\n   * if the StyleProvider is not configured in the app.\n   */\n  static getDefaultTheme() {\n    if (!defaultTheme) {\n      defaultTheme = new Theme({});\n    }\n\n    return defaultTheme;\n  }\n\n  /**\n   * Creates a component style by merging the theme style on top of the\n   * provided default component style. Any rules in the theme style will\n   * override the rules from the base component style.\n   *\n   * This method will also resolve any INCLUDE keywords in the theme or\n   * component styles before returning the final style.\n   *\n   * @param componentName fully qualified component name.\n   * @param defaultStyle - default component style that will be used as base style.\n   */\n  createComponentStyle(componentName, defaultStyle) {\n    if (this[THEME_STYLE_CACHE][componentName]) {\n      return this[THEME_STYLE_CACHE][componentName];\n    }\n\n    const componentIncludedStyle = resolveStyle(\n      defaultStyle,\n      this[THEME_STYLE]\n    );\n\n    /**\n     * This is static component style (static per componentName). This style can only\n     * change if the theme changes during runtime, so it is safe to reuse it within a\n     * scope of a theme once it is resolved for the first time.\n     */\n    this[THEME_STYLE_CACHE][componentName] = mergeComponentAndThemeStyles(\n      componentIncludedStyle,\n      this[THEME_STYLE][componentName],\n      this[THEME_STYLE]\n    );\n\n    return this[THEME_STYLE_CACHE][componentName];\n  }\n}\n\nexport const ThemeShape = PropTypes.shape({\n  createComponentStyle: PropTypes.func.isRequired\n});\n"]},"metadata":{},"sourceType":"script"}