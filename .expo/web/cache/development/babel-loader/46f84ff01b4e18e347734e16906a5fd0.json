{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _jsxFileName = \"D:\\\\WS\\\\reactws\\\\takearide\\\\src\\\\modules\\\\payment\\\\component\\\\ccinput.js\";\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar s = _reactNative.StyleSheet.create({\n  baseInputStyle: {\n    color: \"black\"\n  }\n});\n\nvar CCInput = function (_Component) {\n  (0, _inherits2.default)(CCInput, _Component);\n\n  var _super = _createSuper(CCInput);\n\n  function CCInput() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, CCInput);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.componentWillReceiveProps = function (newProps) {\n      var _this$props = _this.props,\n          status = _this$props.status,\n          value = _this$props.value,\n          onBecomeEmpty = _this$props.onBecomeEmpty,\n          onBecomeValid = _this$props.onBecomeValid,\n          field = _this$props.field;\n      var newStatus = newProps.status,\n          newValue = newProps.value;\n      if (value !== \"\" && newValue === \"\") onBecomeEmpty(field);\n      if (status !== \"valid\" && newStatus === \"valid\") onBecomeValid(field);\n    };\n\n    _this.focus = function () {\n      return _this.refs.input.focus();\n    };\n\n    _this._onFocus = function () {\n      return _this.props.onFocus(_this.props.field);\n    };\n\n    _this._onChange = function (value) {\n      return _this.props.onChange(_this.props.field, value);\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(CCInput, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          label = _this$props2.label,\n          value = _this$props2.value,\n          placeholder = _this$props2.placeholder,\n          status = _this$props2.status,\n          keyboardType = _this$props2.keyboardType,\n          containerStyle = _this$props2.containerStyle,\n          inputStyle = _this$props2.inputStyle,\n          labelStyle = _this$props2.labelStyle,\n          validColor = _this$props2.validColor,\n          invalidColor = _this$props2.invalidColor,\n          placeholderColor = _this$props2.placeholderColor,\n          additionalInputProps = _this$props2.additionalInputProps;\n      return _react.default.createElement(_reactNative.TouchableOpacity, {\n        onPress: this.focus,\n        activeOpacity: 0.99,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: [containerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 9\n        }\n      }, !!label && _react.default.createElement(_reactNative.Text, {\n        style: [labelStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 24\n        }\n      }, label), _react.default.createElement(_reactNative.TextInput, (0, _extends2.default)({\n        ref: \"input\"\n      }, additionalInputProps, {\n        keyboardType: keyboardType,\n        autoCapitalise: \"words\",\n        autoCorrect: false,\n        style: [s.baseInputStyle, inputStyle, validColor && status === \"valid\" ? {\n          color: validColor\n        } : invalidColor && status === \"invalid\" ? {\n          color: invalidColor\n        } : {}],\n        underlineColorAndroid: \"transparent\",\n        placeholderTextColor: placeholderColor,\n        placeholder: placeholder,\n        value: value,\n        onFocus: this._onFocus,\n        onChangeText: this._onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }]);\n  return CCInput;\n}(_react.Component);\n\nexports.default = CCInput;\nCCInput.propTypes = {\n  field: _propTypes.default.string.isRequired,\n  label: _propTypes.default.string,\n  value: _propTypes.default.string,\n  placeholder: _propTypes.default.string,\n  keyboardType: _propTypes.default.string,\n  status: _propTypes.default.oneOf([\"valid\", \"invalid\", \"incomplete\"]),\n  containerStyle: _reactNative.ViewPropTypes.style,\n  inputStyle: _reactNative.Text.propTypes.style,\n  labelStyle: _reactNative.Text.propTypes.style,\n  validColor: _propTypes.default.string,\n  invalidColor: _propTypes.default.string,\n  placeholderColor: _propTypes.default.string,\n  onFocus: _propTypes.default.func,\n  onChange: _propTypes.default.func,\n  onBecomeEmpty: _propTypes.default.func,\n  onBecomeValid: _propTypes.default.func,\n  additionalInputProps: _propTypes.default.shape(_reactNative.TextInput.propTypes)\n};\nCCInput.defaultProps = {\n  label: \"\",\n  value: \"\",\n  status: \"incomplete\",\n  containerStyle: {},\n  inputStyle: {},\n  labelStyle: {},\n  onFocus: function onFocus() {},\n  onChange: function onChange() {},\n  onBecomeEmpty: function onBecomeEmpty() {},\n  onBecomeValid: function onBecomeValid() {},\n  additionalInputProps: {}\n};","map":{"version":3,"sources":["D:/WS/reactws/takearide/src/modules/payment/component/ccinput.js"],"names":["s","StyleSheet","create","baseInputStyle","color","CCInput","componentWillReceiveProps","newProps","props","status","value","onBecomeEmpty","onBecomeValid","field","newStatus","newValue","focus","refs","input","_onFocus","onFocus","_onChange","onChange","label","placeholder","keyboardType","containerStyle","inputStyle","labelStyle","validColor","invalidColor","placeholderColor","additionalInputProps","Component","propTypes","PropTypes","string","isRequired","oneOf","ViewPropTypes","style","Text","func","shape","TextInput","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  View,\r\n  Text,\r\n  TextInput,\r\n  TouchableOpacity,\r\n  StyleSheet,\r\n  ViewPropTypes,\r\n} from \"react-native\";\r\n\r\nconst s = StyleSheet.create({\r\n  baseInputStyle: {\r\n    color: \"black\",\r\n  },\r\n});\r\n\r\nexport default class CCInput extends Component {\r\n  static propTypes = {\r\n    field: PropTypes.string.isRequired,\r\n    label: PropTypes.string,\r\n    value: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    keyboardType: PropTypes.string,\r\n\r\n    status: PropTypes.oneOf([\"valid\", \"invalid\", \"incomplete\"]),\r\n\r\n    containerStyle: ViewPropTypes.style,\r\n    inputStyle: Text.propTypes.style,\r\n    labelStyle: Text.propTypes.style,\r\n    validColor: PropTypes.string,\r\n    invalidColor: PropTypes.string,\r\n    placeholderColor: PropTypes.string,\r\n\r\n    onFocus: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    onBecomeEmpty: PropTypes.func,\r\n    onBecomeValid: PropTypes.func,\r\n    additionalInputProps: PropTypes.shape(TextInput.propTypes),\r\n  };\r\n\r\n  static defaultProps = {\r\n    label: \"\",\r\n    value: \"\",\r\n    status: \"incomplete\",\r\n    containerStyle: {},\r\n    inputStyle: {},\r\n    labelStyle: {},\r\n    onFocus: () => {},\r\n    onChange: () => {},\r\n    onBecomeEmpty: () => {},\r\n    onBecomeValid: () => {},\r\n    additionalInputProps: {},\r\n  };\r\n\r\n  componentWillReceiveProps = newProps => {\r\n    const { status, value, onBecomeEmpty, onBecomeValid, field } = this.props;\r\n    const { status: newStatus, value: newValue } = newProps;\r\n\r\n    if (value !== \"\" && newValue === \"\") onBecomeEmpty(field);\r\n    if (status !== \"valid\" && newStatus === \"valid\") onBecomeValid(field);\r\n  };\r\n\r\n  focus = () => this.refs.input.focus();\r\n\r\n  _onFocus = () => this.props.onFocus(this.props.field);\r\n  _onChange = value => this.props.onChange(this.props.field, value);\r\n\r\n  render() {\r\n    const { label, value, placeholder, status, keyboardType,\r\n            containerStyle, inputStyle, labelStyle,\r\n            validColor, invalidColor, placeholderColor,\r\n            additionalInputProps } = this.props;\r\n    return (\r\n      <TouchableOpacity onPress={this.focus}\r\n        activeOpacity={0.99}>\r\n        <View style={[containerStyle]}>\r\n          { !!label && <Text style={[labelStyle]}>{label}</Text>}\r\n          <TextInput ref=\"input\"\r\n            {...additionalInputProps}\r\n            keyboardType={keyboardType}\r\n            autoCapitalise=\"words\"\r\n            autoCorrect={false}\r\n            style={[\r\n              s.baseInputStyle,\r\n              inputStyle,\r\n              ((validColor && status === \"valid\") ? { color: validColor } :\r\n              (invalidColor && status === \"invalid\") ? { color: invalidColor } :\r\n              {}),\r\n            ]}\r\n            underlineColorAndroid={\"transparent\"}\r\n            placeholderTextColor={placeholderColor}\r\n            placeholder={placeholder}\r\n            value={value}\r\n            onFocus={this._onFocus}\r\n            onChangeText={this._onChange} />\r\n        </View>\r\n      </TouchableOpacity>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"script"}